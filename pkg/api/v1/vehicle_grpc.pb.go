// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VehicleServiceClient is the client API for VehicleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleServiceClient interface {
	// StartLocalVehicle starts a Vehicle on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vehicle/config.yaml
	//   3. all bytes constituting the Vehicle YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVehicle(ctx context.Context, opts ...grpc.CallOption) (VehicleService_StartLocalVehicleClient, error)
	// StartFromPreviousVehicle starts a new Vehicle based on a previous one.
	// If the previous Vehicle does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVehicle(ctx context.Context, in *StartFromPreviousVehicleRequest, opts ...grpc.CallOption) (*StartVehicleResponse, error)
	// StartVehicleRequest starts a new Vehicle based on its specification.
	StartVehicle(ctx context.Context, in *StartVehicleRequest, opts ...grpc.CallOption) (*StartVehicleResponse, error)
	// Searches for Vehicle(s) known to this Vehicle
	ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error)
	// Subscribe listens to new Vehicle(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VehicleService_SubscribeClient, error)
	// GetVehicle retrieves details of a single Vehicle
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error)
	// Listen listens to Vehicle updates and log output of a running Vehicle
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VehicleService_ListenClient, error)
	// StopVehicle stops a currently running Vehicle
	StopVehicle(ctx context.Context, in *StopVehicleRequest, opts ...grpc.CallOption) (*StopVehicleResponse, error)
}

type vehicleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleServiceClient(cc grpc.ClientConnInterface) VehicleServiceClient {
	return &vehicleServiceClient{cc}
}

func (c *vehicleServiceClient) StartLocalVehicle(ctx context.Context, opts ...grpc.CallOption) (VehicleService_StartLocalVehicleClient, error) {
	stream, err := c.cc.NewStream(ctx, &VehicleService_ServiceDesc.Streams[0], "/v1.VehicleService/StartLocalVehicle", opts...)
	if err != nil {
		return nil, err
	}
	x := &vehicleServiceStartLocalVehicleClient{stream}
	return x, nil
}

type VehicleService_StartLocalVehicleClient interface {
	Send(*StartLocalVehicleRequest) error
	CloseAndRecv() (*StartVehicleResponse, error)
	grpc.ClientStream
}

type vehicleServiceStartLocalVehicleClient struct {
	grpc.ClientStream
}

func (x *vehicleServiceStartLocalVehicleClient) Send(m *StartLocalVehicleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vehicleServiceStartLocalVehicleClient) CloseAndRecv() (*StartVehicleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartVehicleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vehicleServiceClient) StartFromPreviousVehicle(ctx context.Context, in *StartFromPreviousVehicleRequest, opts ...grpc.CallOption) (*StartVehicleResponse, error) {
	out := new(StartVehicleResponse)
	err := c.cc.Invoke(ctx, "/v1.VehicleService/StartFromPreviousVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) StartVehicle(ctx context.Context, in *StartVehicleRequest, opts ...grpc.CallOption) (*StartVehicleResponse, error) {
	out := new(StartVehicleResponse)
	err := c.cc.Invoke(ctx, "/v1.VehicleService/StartVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error) {
	out := new(ListVehiclesResponse)
	err := c.cc.Invoke(ctx, "/v1.VehicleService/ListVehicles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VehicleService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &VehicleService_ServiceDesc.Streams[1], "/v1.VehicleService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &vehicleServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VehicleService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type vehicleServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *vehicleServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vehicleServiceClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error) {
	out := new(GetVehicleResponse)
	err := c.cc.Invoke(ctx, "/v1.VehicleService/GetVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VehicleService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &VehicleService_ServiceDesc.Streams[2], "/v1.VehicleService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &vehicleServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VehicleService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type vehicleServiceListenClient struct {
	grpc.ClientStream
}

func (x *vehicleServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vehicleServiceClient) StopVehicle(ctx context.Context, in *StopVehicleRequest, opts ...grpc.CallOption) (*StopVehicleResponse, error) {
	out := new(StopVehicleResponse)
	err := c.cc.Invoke(ctx, "/v1.VehicleService/StopVehicle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleServiceServer is the server API for VehicleService service.
// All implementations must embed UnimplementedVehicleServiceServer
// for forward compatibility
type VehicleServiceServer interface {
	// StartLocalVehicle starts a Vehicle on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vehicle/config.yaml
	//   3. all bytes constituting the Vehicle YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalVehicle(VehicleService_StartLocalVehicleServer) error
	// StartFromPreviousVehicle starts a new Vehicle based on a previous one.
	// If the previous Vehicle does not have the can-replay condition set this call will result in an error.
	StartFromPreviousVehicle(context.Context, *StartFromPreviousVehicleRequest) (*StartVehicleResponse, error)
	// StartVehicleRequest starts a new Vehicle based on its specification.
	StartVehicle(context.Context, *StartVehicleRequest) (*StartVehicleResponse, error)
	// Searches for Vehicle(s) known to this Vehicle
	ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error)
	// Subscribe listens to new Vehicle(s) updates
	Subscribe(*SubscribeRequest, VehicleService_SubscribeServer) error
	// GetVehicle retrieves details of a single Vehicle
	GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error)
	// Listen listens to Vehicle updates and log output of a running Vehicle
	Listen(*ListenRequest, VehicleService_ListenServer) error
	// StopVehicle stops a currently running Vehicle
	StopVehicle(context.Context, *StopVehicleRequest) (*StopVehicleResponse, error)
	mustEmbedUnimplementedVehicleServiceServer()
}

// UnimplementedVehicleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVehicleServiceServer struct {
}

func (UnimplementedVehicleServiceServer) StartLocalVehicle(VehicleService_StartLocalVehicleServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) StartFromPreviousVehicle(context.Context, *StartFromPreviousVehicleRequest) (*StartVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) StartVehicle(context.Context, *StartVehicleRequest) (*StartVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedVehicleServiceServer) Subscribe(*SubscribeRequest, VehicleService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedVehicleServiceServer) GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) Listen(*ListenRequest, VehicleService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedVehicleServiceServer) StopVehicle(context.Context, *StopVehicleRequest) (*StopVehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVehicle not implemented")
}
func (UnimplementedVehicleServiceServer) mustEmbedUnimplementedVehicleServiceServer() {}

// UnsafeVehicleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleServiceServer will
// result in compilation errors.
type UnsafeVehicleServiceServer interface {
	mustEmbedUnimplementedVehicleServiceServer()
}

func RegisterVehicleServiceServer(s grpc.ServiceRegistrar, srv VehicleServiceServer) {
	s.RegisterService(&VehicleService_ServiceDesc, srv)
}

func _VehicleService_StartLocalVehicle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VehicleServiceServer).StartLocalVehicle(&vehicleServiceStartLocalVehicleServer{stream})
}

type VehicleService_StartLocalVehicleServer interface {
	SendAndClose(*StartVehicleResponse) error
	Recv() (*StartLocalVehicleRequest, error)
	grpc.ServerStream
}

type vehicleServiceStartLocalVehicleServer struct {
	grpc.ServerStream
}

func (x *vehicleServiceStartLocalVehicleServer) SendAndClose(m *StartVehicleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vehicleServiceStartLocalVehicleServer) Recv() (*StartLocalVehicleRequest, error) {
	m := new(StartLocalVehicleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VehicleService_StartFromPreviousVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).StartFromPreviousVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VehicleService/StartFromPreviousVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).StartFromPreviousVehicle(ctx, req.(*StartFromPreviousVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_StartVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).StartVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VehicleService/StartVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).StartVehicle(ctx, req.(*StartVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VehicleService/ListVehicles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).ListVehicles(ctx, req.(*ListVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VehicleServiceServer).Subscribe(m, &vehicleServiceSubscribeServer{stream})
}

type VehicleService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type vehicleServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *vehicleServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VehicleService_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VehicleService/GetVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VehicleServiceServer).Listen(m, &vehicleServiceListenServer{stream})
}

type VehicleService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type vehicleServiceListenServer struct {
	grpc.ServerStream
}

func (x *vehicleServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VehicleService_StopVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleServiceServer).StopVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VehicleService/StopVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleServiceServer).StopVehicle(ctx, req.(*StopVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VehicleService_ServiceDesc is the grpc.ServiceDesc for VehicleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VehicleService",
	HandlerType: (*VehicleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousVehicle",
			Handler:    _VehicleService_StartFromPreviousVehicle_Handler,
		},
		{
			MethodName: "StartVehicle",
			Handler:    _VehicleService_StartVehicle_Handler,
		},
		{
			MethodName: "ListVehicles",
			Handler:    _VehicleService_ListVehicles_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _VehicleService_GetVehicle_Handler,
		},
		{
			MethodName: "StopVehicle",
			Handler:    _VehicleService_StopVehicle_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalVehicle",
			Handler:       _VehicleService_StartLocalVehicle_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _VehicleService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _VehicleService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vehicle.proto",
}
